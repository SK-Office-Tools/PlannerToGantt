@page "/"

@using System.IO
@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Globalization;
@using System.Linq;
@using CsvHelper.Excel;
@using PlannerToGantt.Data;
@using Syncfusion.Blazor.Gantt

@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Planner to Gantt</PageTitle>

<h1>Convert your Planner to Gantt chart</h1>

<div @ref="dropZoneElement" class="drop-zone">
    <p>Drop your exported planner excel file here</p>
    <div @ref="inputFileContainer">
        <InputFile OnChange="@OnChange" accept=".xlsx, xls" />
    </div>
</div>

@if (_tasks != null)
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGantt DataSource="@_tasks" Height="450px" Width="100%" TreeColumnIndex="1" ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd"
                         Toolbar="@(new List<string>() { "Add", "Edit", "Update", "Delete", "Cancel", "ExpandAll", "CollapseAll" })" AllowUnscheduledTasks="true">
                    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                     ParentID="ParentId" ResourceInfo="Resources">
                    </GanttTaskFields>
                    <GanttEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" AllowTaskbarEditing="false"
                                       ShowDeleteConfirmDialog="false"></GanttEditSettings>
                    <GanttColumns>
                        <GanttColumn Field="Id" HeaderText="ID"></GanttColumn>
                        <GanttColumn Field="TaskName" HeaderText="Task" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                        <GanttColumn Field="Resources" HeaderText="Assigned To"></GanttColumn>
                        <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                        <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    </GanttColumns>
                    <GanttResourceFields Resources="ResourceCollection" Id="ResourceId" Name="ResourceName" Unit="Unit" TResources="ResourceAllocateData"></GanttResourceFields>
                    <GanttLabelSettings RightLabel="Resources" TValue="TaskData"></GanttLabelSettings>
                    <GanttSplitterSettings Position="28%"> </GanttSplitterSettings>
                </SfGantt>
            </div>
        </div>
    </div>
}

@code {
    ElementReference dropZoneElement;
    ElementReference inputFileContainer;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    List<TaskData> _tasks = null;
    private DateTime ProjectStart = new DateTime(2021, 12, 1);
    private DateTime ProjectEnd = new DateTime(2022, 6, 28);
    private List<ResourceAllocateData> ResourceCollection { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFileContainer);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var importFile = e.File;

        await using MemoryStream ms = new();
        await importFile.OpenReadStream().CopyToAsync(ms);

        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            HasHeaderRecord = true
        };

        using var parser = new ExcelParser(ms, "Tasks", config);
        using (var csvReader = new CsvReader(parser))
        {
            csvReader.Context.RegisterClassMap<PlannerDataMap>();
            await csvReader.ReadAsync();
            csvReader.ReadHeader();
            var allTasks = await csvReader.GetRecordsAsync<TaskData>().ToListAsync();
            _tasks = allTasks;
        }
        var resources = _tasks.Select(t => t.AssignedTo);
        var tmp = new List<string>();
        foreach (var res in resources)
            tmp.AddRange(res.Split(';'));
        tmp = tmp.Distinct().ToList();
        int resId = 0;
        int taskId = 0;
        ResourceCollection = tmp.Select(res => new ResourceAllocateData { ResourceId = resId++, ResourceName = res }).ToList();
        foreach(var task in _tasks)
        {
            task.TaskId = taskId++;
            if (task.StartDate == DateTime.MinValue) task.StartDate = task.CreatedDate;
            task.Resources = task.AssignedTo.Split(";").Select(x => ResourceCollection.First(y => y.ResourceName == x)).ToList();
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}